for (row_index in 1:nrow(new_dataframe)) {
if (new_dataframe[row_index, 2] == regions[region_index]) {
region_data[count, ] <- c(new_dataframe[row_index, 1], new_dataframe[row_index, 2], new_dataframe[row_index, 3])
count <- count + 1
}
row_index <- row_index + 1
}
region_data
cat("Maximum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == max(region_data$Rank)), 1], "\n")
cat("Minimum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == min(region_data$Rank)), 1], "\n")
median_values <- c()
for (i in 1:(length(region_data) - 1)) {
median_values <- append(median_values, new_dataframe[1, 3])
}
cat("Median happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == median(region_data[2:(length(median_values) - 1), 3])), 1], "\n")
}
# Step 5
life_span <- data[, "Healthy.life.expectancy"]
low_lim <- 15
high_lim <- 20
min_val <- min(data[, "Healthy.life.expectancy"])
max_val <- max(data[, "Healthy.life.expectancy"])
for (i in 1:nrow(data)) {
scaled <- (((life_span[i] - min_val) / (max_val - min_val)) * (high_lim - low_lim) + low_lim)
life_span[i] <- scaled
}
hist(life_span, main = "Plot", xlab = "Life Span")
hist(life_span, main = "Histogram-Plot", xlab = "Life Span")
new_dataframe <- data[1:3]
row_index <- 1
for (row_index in 1:nrow(data)) {
sum_values <- (data[row_index, 4] + data[row_index, 5] + data[row_index, 6] + data[row_index, 7] + data[row_index, 8] + data[row_index, 9] - data[row_index, 16])
new_dataframe[row_index, 3] <- sum_values
}
new_dataframe
regions <- c("Central and Eastern Europe", "Commonwealth of Independent States", "East Asia", "Latin America and Caribbean", "Middle East and North Africa", "South Asia", "Southeast Asia", "Sub-Saharan Africa", "Western Europe")
for (region_index in 1:length(regions)) {
region_data <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(region_data) <- c('Country', 'Region', 'Rank')
count <- 1
for (row_index in 1:nrow(new_dataframe)) {
if (new_dataframe[row_index, 2] == regions[region_index]) {
region_data[count, ] <- c(new_dataframe[row_index, 1], new_dataframe[row_index, 2], new_dataframe[row_index, 3])
count <- count + 1
}
row_index <- row_index + 1
}
region_data
cat("Maximum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == max(region_data$Rank)), 1], "\n")
cat("Minimum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == min(region_data$Rank)), 1], "\n")
median_values <- c()
for (i in 1:(length(region_data) - 1)) {
median_values <- append(median_values, new_dataframe[1, 3])
}
cat("Median happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == median(region_data[2:(length(median_values) - 1), 3])), 1], "\n")
}
source("~/Downloads/S20200010213_R_A1.r")
# Step 1
current_directory <- getwd()
print(current_directory)
data <- read.csv("world_happiness_data_2021.csv")
print(data)
# Step 2 & 3
n_cols <- ncol(data)
for (col_index in 3:n_cols) {
row_index <- 1
Min <- quantile(data[1:nrow(data), col_index], 0.25) - (1.5 * IQR(data[1:nrow(data), col_index]))
Max <- quantile(data[1:nrow(data), col_index], 0.75) + (1.5 * IQR(data[1:nrow(data), col_index]))
while (row_index <= nrow(data[col_index])) {
if (data[row_index, col_index] < Min | data[row_index, col_index] > Max) {
data <- data[!(data[col_index] == data[row_index, col_index]), ]
}
row_index <- row_index + 1
}
}
for (col_index in 3:n_cols) {
boxplot(data[col_index])
}
# Step 4
for (i in 3:n_cols) {
if (sd(data[, i]) == 0) {
print(data[i])
drop_cols <- data[i]
}
}
data <- data[!data %in% drop_cols]
correl_data <- cor(data[3:n_cols], use = "complete.obs")
# Step 1
current_directory <- getwd()
print(current_directory)
data <- read.csv("world_happiness_data_2021.csv")
print(data)
# Step 2 & 3
n_cols <- ncol(data)
for (col_index in 3:n_cols) {
row_index <- 1
Min <- quantile(data[1:nrow(data), col_index], 0.25) - (1.5 * IQR(data[1:nrow(data), col_index]))
Max <- quantile(data[1:nrow(data), col_index], 0.75) + (1.5 * IQR(data[1:nrow(data), col_index]))
while (row_index <= nrow(data[col_index])) {
if (data[row_index, col_index] < Min | data[row_index, col_index] > Max) {
data <- data[!(data[col_index] == data[row_index, col_index]), ]
}
row_index <- row_index + 1
}
}
for (col_index in 3:n_cols) {
boxplot(data[col_index])
}
# Step 4
for (i in 3:n_cols) {
if (sd(data[, i]) == 0) {
print(data[i])
drop_cols <- data[i]
}
}
data <- data[!data %in% drop_cols]
correl_data <- cor(data[3:ncol(data)], use = "complete.obs")
high_crr <- 0
for (i in 3:ncol(data)) {
for (j in 3:ncol(data)) {
if (i != j) {
corr_value <- cor(data[i], data[j])
if (corr_value[1] > 0.90) {
high_crr <- append(high_crr, j)
}
}
}
}
drop_cols <- data[6]
data <- data[!data %in% drop_cols]
drop_cols <- data[5]
data <- data[!data %in% drop_cols]
drop_cols <- data[3]
data <- data[!data %in% drop_cols]
# Step 5
life_span <- data[, "Healthy.life.expectancy"]
low_lim <- 15
high_lim <- 20
min_val <- min(data[, "Healthy.life.expectancy"])
max_val <- max(data[, "Healthy.life.expectancy"])
for (i in 1:nrow(data)) {
scaled <- (((life_span[i] - min_val) / (max_val - min_val)) * (high_lim - low_lim) + low_lim)
life_span[i] <- scaled
}
hist(life_span, main = "Histogram-Plot", xlab = "Life Span")
# Step 6
new_dataframe <- data[1:3]
row_index <- 1
for (row_index in 1:nrow(data)) {
sum_values <- (data[row_index, 4] + data[row_index, 5] + data[row_index, 6] + data[row_index, 7] + data[row_index, 8] + data[row_index, 9] - data[row_index, 16])
new_dataframe[row_index, 3] <- sum_values
}
new_dataframe
regions <- c("Central and Eastern Europe", "Commonwealth of Independent States", "East Asia", "Latin America and Caribbean", "Middle East and North Africa", "South Asia", "Southeast Asia", "Sub-Saharan Africa", "Western Europe")
for (region_index in 1:length(regions)) {
region_data <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(region_data) <- c('Country', 'Region', 'Rank')
count <- 1
for (row_index in 1:nrow(new_dataframe)) {
if (new_dataframe[row_index, 2] == regions[region_index]) {
region_data[count, ] <- c(new_dataframe[row_index, 1], new_dataframe[row_index, 2], new_dataframe[row_index, 3])
count <- count + 1
}
row_index <- row_index + 1
}
region_data
cat("Maximum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == max(region_data$Rank)), 1], "\n")
cat("Minimum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == min(region_data$Rank)), 1], "\n")
median_values <- c()
for (i in 1:(length(region_data) - 1)) {
median_values <- append(median_values, data[1, 3])
}
cat("Median happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == median(region_data[2:(length(median_values) - 1), 3])), 1], "\n")
}
# Step 6
new_dataframe <- data[1:3]
row_index <- 1
for (row_index in 1:nrow(data)) {
sum_values <- (data[row_index, 4] + data[row_index, 5] + data[row_index, 6] + data[row_index, 7] + data[row_index, 8] + data[row_index, 9] - data[row_index, 16])
new_dataframe[row_index, 3] <- sum_values
}
new_dataframe
regions <- c("Central and Eastern Europe", "Commonwealth of Independent States", "East Asia", "Latin America and Caribbean", "Middle East and North Africa", "South Asia", "Southeast Asia", "Sub-Saharan Africa", "Western Europe")
for (region_index in 1:length(regions)) {
region_data <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(region_data) <- c('Country', 'Region', 'Rank')
count <- 1
for (row_index in 1:nrow(new_dataframe)) {
if (new_dataframe[row_index, 2] == regions[region_index]) {
region_data[count, ] <- c(new_dataframe[row_index, 1], new_dataframe[row_index, 2], new_dataframe[row_index, 3])
count <- count + 1
}
row_index <- row_index + 1
}
region_data
cat("Maximum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == max(region_data$Rank)), 1], "\n")
cat("Minimum happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == min(region_data$Rank)), 1], "\n")
median_values <- 0
for (i in 1:(length(region_data) - 1)) {
median_values <- append(median_values, data[1, 3])
}
cat("Median happiness country in the region: ", regions[region_index], " is:\n")
cat(region_data[which(region_data$Rank == median(region_data[2:(length(median_values) - 1), 3])), 1], "\n")
}
source("~/.active-rstudio-document")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/S20200010091_R_A1.R")
install.packages("gginference")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
source("~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/test.R")
mu = 3
sample_ob = c(3,5,4,5,3,3,4,5,5,4)
t_obs = (mean(sample_ob)-mu)/(sd(sample_ob))/sqrt(length(sample_ob))
t_obs
t.test(sample_ob, mu=3, conf.level = 0.95)
ggttest((t.test(sample_ob, mu=3)))
gc()
library(gginference)
library(MASS)
mu = 3
sample_ob = c(3,5,4,5,3,3,4,5,5,4)
t_obs = (mean(sample_ob)-mu)/(sd(sample_ob))/sqrt(length(sample_ob))
t_obs
t.test(sample_ob, mu=3, conf.level = 0.95)
ggttest(t.test(sample_ob, mu=3))
studentData <- read.csv(file = "/82_Data_File.csv",
header = TRUE,
sep = ","
)
studentData <- read.csv(file = "~/Drive-D/clg/7/ida/r-work-directory/ida-r-codes/82_Data_File.csv",
header = TRUE,
sep = ","
)
print(studentData)
View(studentData)
before <- c(200, 190, 180, 140, 150, 195, 155, 165, 175, 180)
after <- c(210, 215, 195, 160, 160, 230, 180, 170, 180, 200)
my_data <- data.frame(
group = rep(c("before", "after"), epoch = 10),
weight = c(before, after)
)
print(my_data)
group_by(my_data, group)%%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
group_by(my_data, group)%>%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
group_by(my_data, group)%%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
group_by(my_data, group)%>%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
library("ggpubr")
group_by(my_data, group)%>%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
library(gginference)
library(MASS)
group_by(my_data, group)%>%
sumarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
group_by(my_data, group)%>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
group_by(my_data, group)%>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
ggboxplot(my_data, x= "group", y = " weight",
color = "group", palette = c("green", "magenta"),
order = c("before", "after"),
ylab = "weight", xlab = "groups"
)
library("ggpubr")
library("gginference")
library("MASS")
library("dplyr")
ggboxplot(my_data, x= "group", y = " weight",
color = "group", palette = c("green", "magenta"),
order = c("before", "after"),
ylab = "weight", xlab = "groups"
)
before <- c(200, 190, 180, 140, 150, 195, 155, 165, 175, 180)
after <- c(210, 215, 195, 160, 160, 230, 180, 170, 180, 200)
my_data <- data.frame(
group = rep(c("before", "after"), epoch = 10),
weight = c(before, after)
)
print(my_data)
group_by(my_data, group)%>%
summarise(
count = n(),
mean = mean(weight, na.rm = TRUE),
sd = sd(weight, na.rm = TRUE)
)
ggboxplot(my_data, x= "group", y = " weight",
color = "group", palette = c("green", "magenta"),
order = c("before", "after"),
ylab = "weight", xlab = "groups"
)
ggboxplot(my_data, x= "group", y = "weight",
color = "group", palette = c("green", "magenta"),
order = c("before", "after"),
ylab = "weight", xlab = "groups"
)
#compute difference
d <- with(my_data, weight(group="before") - weight(group="after"))
#compute difference
d <- with(my_data, weight[group=="before"] - weight[group=="after"])
#Shapiro-Wilk test
shapiro.test(d) #p>0.05 => implies normality in data
#compute t-test => 1st method => when given data is two seperate vectors
res <- t.test(before, after, paired=TRUE)
res
ggttest(t.test(before, after, paired=TRUE))
ggttest(ttest_result, xlab = "Groups", ylab = "Weight") +
geom_vline(xintercept = 0, linetype = "dashed")
#ggttest(t.test(before, after, paired=TRUE))
ttest_result <- t.test(before, after, paired = TRUE)
ggttest(ttest_result, xlab = "Groups", ylab = "Weight") +
geom_vline(xintercept = 0, linetype = "dashed")
ggttest(t.test(before, after, paired=TRUE))
gc()
gc()
mean <- 5818
n <- 24
S2 <- 7273809
mu <- 5800
t <- (mean - mu) / (S2 / n)^(1/2)
# DOF (degrees of freedom)
df <- (n - 1)
# P-value from table
p <- pt(t, df)
# Results
cat("Test Statistic = ", t)
cat("Degrees of Freedom = ", df)
cat("P-value = ", p)
# P-value from table
p <- qt(0.1, df)
# P-value from table
p <- qt(0.05, df)
# P-value from table
p <- qt(0.1, df)
# P-value
p_value <- abs(pt(t_stat, df))
# P-value from table
p <- abs(qt(0.1, df))
if(t < p){
cat("Failed to Reject the null Hypothesis meaning the mean is less than 5,800 tons")
}else {
cat("Rejected the null hypothesis that the mean is less than 5,800 tons")
}
#question 2
# Given data
tar = c(14.5, 14.2, 14.4, 14.3, 14.6)
# Sample size
n = length(tar)
# Sample mean
xbar = mean(tar)
# Claimed Population mean
mu = 14.0
# Sample standard deviation
sd = sd(tar)
# Degrees of freedom
df = n - 1
# Test statistic
t = (xbar - mu) / (sd/sqrt(n))
# Critical-t-value from table
tc <- abs(qt(0.05, df))
# Critical-t-value from table
tc <- abs(qt(0.025, df))
# Report
cat("Sample mean (xbar): ", xbar)
cat("Claimed population mean (mu): ", mu)
cat("t-stat: ", t)
cat("Critical-t-value = ", tc)
if(t < tc){
cat("Failed to Reject null hypothesis that population mean is 14.0")
} else {
cat("Reject null hypothesis that population mean is 14.0")
}
#Question 3b
# Paired t-test
# Before data
before <- c(45, 73, 46, 124, 33, 57, 83, 34, 26, 17)
# After data
after <- c(36, 60, 44, 119, 35, 51, 77, 29, 24, 11)
t_test <- t.test(before, after, paired = TRUE)
# Extract p-value
p_value <- t_test$p.value
# Report test at 0.05 level
cat("t-statistic = ", t_test$statistic)
# Sample size
n = length(before)
# Degrees of freedom
df = n - 1
# After data
after <- c(36, 60, 44, 119, 35, 51, 77, 29, 24, 11)
t_test <- t.test(before, after, paired = TRUE)
# Critical-t-value from table for two-tailed take given alpha/2
tc <- abs(qt(0.025, df))
# Report test at 0.05 level
cat("t-statistic = ", t_test$statistic)
cat("Critical-t-value = ", tc)
if(t < tc){
cat("Reject null hypothesis that safety program had no effect")
} else {
cat("Fail to reject null hypothesis that safety program had no effect")
}
# Test statistic
t = t_test$statistic
# Report test at 0.05 level
cat("t-statistic = ", t)
cat("Critical-t-value = ", tc)
if(t < tc){
cat("Reject null hypothesis that safety program had no effect")
} else {
cat("Fail to reject null hypothesis that safety program had no effect")
}
cat("Failed to reject null hypothesis that safety program had no effect")
if(t < tc){
cat("Failed to reject null hypothesis that safety program had no effect")
} else {
cat("Rejected null hypothesis that safety program had no effect")
}
#question 3c
# Given Data
bfr <- c(45, 73, 46, 124, 33, 57, 83, 34, 26, 17)
afr <- c(36, 60, 44, 119, 35, 51, 77, 29, 24, 11)
# Sign test
sign_test <- wilcox.test(bfr, afr, paired = TRUE, exact = FALSE)
# Extract p-value
p_value <- sign_test$p.value
# Report test at 0.05 level
cat("Number of negative differences =", sign_test$statistic)
cat("p-value =", p_value)
if(p_value < 0.05){
cat("Reject null hypothesis that safety program had no effect")
} else {
cat("Fail to reject null hypothesis that safety program had no effect")
}
if(p_value < 0.05){
cat("Rejected null hypothesis that safety program had no effect")
} else {
cat("Failed to reject null hypothesis that safety program had no effect")
}
#question 4
# Given Data
data <- c(0.265, 0.263, 0.266, 0.267, 0.267, 0.265, 0.267, 0.267, 0.265, 0.268, 0.268, 0.263)
# Claimed mean
mu <- 0.265
# Wilcoxon signed-rank test
wilcox_test <- wilcox.test(data, mu, alternative = "two.sided", exact = FALSE)
# Test statistic
t = wilcox_test$statistic
# Extract p-value
p_value <- wilcox_test$p.value
# Output
cat("Test statistic = ", t)
cat("p-value = ", p_value)
if(p_value < 0.05){
cat("Reject the claim that the mean diameter is 0.265 mm")
} else {
cat("Fail to reject the claim that the mean diameter is 0.265 mm")
}
if(p_value < 0.05){
cat("Rejected the claim that the mean diameter is 0.265 mm")
} else {
cat("Failed to reject the claim that the mean diameter is 0.265 mm")
}
